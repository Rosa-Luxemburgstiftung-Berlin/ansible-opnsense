#jinja2: lstrip_blocks: "True", trim_blocks: "True"
{# SPDX-FileCopyrightText: 2021 Robin Schneider <ypid@riseup.net>
 #
 # SPDX-License-Identifier: Apache-2.0
 #}
{# Should this be defined in NetBox instead of deriving it here? #}
{% set interface_name_to_opnsense_if_name_map = {} %}
{% set interface_description_to_opnsense_if_name_map = {} %}
{% set interface_role_to_opnsense_if_names_map = {} %}
{% set vlans = [] %}
{% for interface in interfaces|sort(attribute="id") %}
  {% set interface_vlans = [] %}
  {% for vlan in [interface.untagged_vlan] if vlan %}
    {% set _ = vlan.update({'interface': interface, 'mode': 'untagged'}) %}
    {% set _ = interface_vlans.append(vlan) %}
  {% endfor %}
  {% for vlan in interface.tagged_vlans if vlan %}
    {% set _ = vlan.update({'interface': interface, 'mode': 'tagged'}) %}
    {% set _ = interface_vlans.append(vlan) %}
  {% endfor %}
  {% set _ = vlans.extend(interface_vlans) %}
  {% if interface_vlans and interface_vlans[0].name.lower() == "users" %}
    {% set opnsense_if_name = "lan" %}
  {% endif %}
  {% if interface.description.lower() == "ext" %}
    {% set opnsense_if_name = "wan" %}
  {% endif %}
  {% if opnsense_if_name is undefined or interface.name in interface_name_to_opnsense_if_name_map %}
    {% set opnsense_if_name = "opt" + (interface.id|string) %}
  {% endif %}
  {% set _ = interface_name_to_opnsense_if_name_map.update({interface.name: opnsense_if_name}) %}
  {% set _ = interface_description_to_opnsense_if_name_map.update({interface.description: opnsense_if_name}) %}
  {% set _ = interface_role_to_opnsense_if_names_map.setdefault(interface.description.split('_')[0], []) %}
  {% set _ = interface_role_to_opnsense_if_names_map[interface.description.split('_')[0]].append(opnsense_if_name) %}
{% endfor %}
{% macro print_rule_ansible_managed(descr='') %}
{% if descr %}
<descr>{{ descr }} Ansible managed.</descr>
{% else %}
<descr>Ansible managed.</descr>
{% endif %}
<updated>
  <username>user@ansible-controller</username>
  <time>1559503041.8803</time>
  <description>OPNsense Ansible controller made changes</description>
</updated>
<created>
  <username>user@ansible-controller</username>
  <time>1559503041.8803</time>
  <description>OPNsense Ansible controller made changes</description>
</created>
{%- endmacro %}
<?xml version="1.0"?>
<opnsense>
  {{ lookup("xmlfile", local_config_path_fetch, local_config_path_fetch, xpath="//opnsense/theme") }}
  <sysctl>
    <item>
      <descr>Increase UFS read-ahead speeds to match the state of hard drives and NCQ.</descr>
      <tunable>vfs.read_max</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Set the ephemeral port range to be lower.</descr>
      <tunable>net.inet.ip.portrange.first</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Drop packets to closed TCP ports without returning a RST</descr>
      <tunable>net.inet.tcp.blackhole</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Do not send ICMP port unreachable messages for closed UDP ports</descr>
      <tunable>net.inet.udp.blackhole</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Randomize the ID field in IP packets</descr>
      <tunable>net.inet.ip.random_id</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>
        Source routing is another way for an attacker to try to reach non-routable addresses behind your box.
        It can also be used to probe for information about your internal networks. These functions come enabled
        as part of the standard FreeBSD core system.
      </descr>
      <tunable>net.inet.ip.sourceroute</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>
        Source routing is another way for an attacker to try to reach non-routable addresses behind your box.
        It can also be used to probe for information about your internal networks. These functions come enabled
        as part of the standard FreeBSD core system.
      </descr>
      <tunable>net.inet.ip.accept_sourceroute</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>
        This option turns off the logging of redirect packets because there is no limit and this could fill
        up your logs consuming your whole hard drive.
      </descr>
      <tunable>net.inet.icmp.log_redirect</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Drop SYN-FIN packets (breaks RFC1379, but nobody uses it anyway)</descr>
      <tunable>net.inet.tcp.drop_synfin</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Enable sending IPv6 redirects</descr>
      <tunable>net.inet6.ip6.redirect</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Enable privacy settings for IPv6 (RFC 4941)</descr>
      <tunable>net.inet6.ip6.use_tempaddr</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Prefer privacy addresses and use them over the normal addresses</descr>
      <tunable>net.inet6.ip6.prefer_tempaddr</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Generate SYN cookies for outbound SYN-ACK packets</descr>
      <tunable>net.inet.tcp.syncookies</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Maximum incoming/outgoing TCP datagram size (receive)</descr>
      <tunable>net.inet.tcp.recvspace</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Maximum incoming/outgoing TCP datagram size (send)</descr>
      <tunable>net.inet.tcp.sendspace</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Do not delay ACK to try and piggyback it onto a data packet</descr>
      <tunable>net.inet.tcp.delayed_ack</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Maximum outgoing UDP datagram size</descr>
      <tunable>net.inet.udp.maxdgram</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Handling of non-IP packets which are not passed to pfil (see if_bridge(4))</descr>
      <tunable>net.link.bridge.pfil_onlyip</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Set to 1 to additionally filter on the physical interface for locally destined packets</descr>
      <tunable>net.link.bridge.pfil_local_phys</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Set to 0 to disable filtering on the incoming and outgoing member interfaces.</descr>
      <tunable>net.link.bridge.pfil_member</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Set to 1 to enable filtering on the bridge interface</descr>
      <tunable>net.link.bridge.pfil_bridge</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Allow unprivileged access to tap(4) device nodes</descr>
      <tunable>net.link.tap.user_open</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Randomize PID's (see src/sys/kern/kern_fork.c: sysctl_kern_randompid())</descr>
      <tunable>kern.randompid</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Maximum size of the IP input queue</descr>
      <tunable>net.inet.ip.intr_queue_maxlen</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Disable CTRL+ALT+Delete reboot from keyboard.</descr>
      <tunable>hw.syscons.kbd_reboot</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Enable TCP extended debugging</descr>
      <tunable>net.inet.tcp.log_debug</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Set ICMP Limits</descr>
      <tunable>net.inet.icmp.icmplim</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>TCP Offload Engine</descr>
      <tunable>net.inet.tcp.tso</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>UDP Checksums</descr>
      <tunable>net.inet.udp.checksum</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Maximum socket buffer size</descr>
      <tunable>kern.ipc.maxsockbuf</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Page Table Isolation (Meltdown mitigation, requires reboot.)</descr>
      <tunable>vm.pmap.pti</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Disable Indirect Branch Restricted Speculation (Spectre V2 mitigation)</descr>
      <tunable>hw.ibrs_disable</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Hide processes running as other groups</descr>
      <tunable>security.bsd.see_other_gids</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Hide processes running as other users</descr>
      <tunable>security.bsd.see_other_uids</tunable>
      <value>default</value>
    </item>
    <item>
      <descr>Enable/disable sending of ICMP redirects in response to IP packets for which a better,
        and for the sender directly reachable, route and next hop is known.
      </descr>
      <tunable>net.inet.ip.redirect</tunable>
      <value>0</value>
    </item>
    <item>
      <descr>
        Redirect attacks are the purposeful mass-issuing of ICMP type 5 packets. In a normal network, redirects
        to the end stations should not be required. This option enables the NIC to drop all inbound ICMP redirect
        packets without returning a response.
      </descr>
      <tunable>net.inet.icmp.drop_redirect</tunable>
      <value>1</value>
    </item>
    <item>
      <descr>Maximum outgoing UDP datagram size</descr>
      <tunable>net.local.dgram.maxdgram</tunable>
      <value>default</value>
    </item>
  </sysctl>
  <system>
    <serialspeed>115200</serialspeed>
    <primaryconsole>serial</primaryconsole>
    <secondaryconsole>video</secondaryconsole>
    {% if not is_virtual %}
    {# Password protect the console access on physical devices. #}
    {# For VMs it does not make much sense. #}
    <disableconsolemenu>1</disableconsolemenu>
    {% endif %}
    <optimization>normal</optimization>
    <hostname>{{ inventory_hostname_short }}</hostname>
    <domain>{{ site_name }}</domain>
    <dnsallowoverride>on</dnsallowoverride>
    <group>
      <name>admins</name>
      <description>System Administrators</description>
      <scope>system</scope>
      <gid>1999</gid>
      <member>0</member>
      <priv>page-all</priv>
    </group>
    {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/system/user") }}
    <nextuid>2000</nextuid>
    <nextgid>2000</nextgid>
    <timezone>{{ ntp__timezone }}</timezone>
    <timeservers>0.opnsense.pool.ntp.org 1.opnsense.pool.ntp.org 2.opnsense.pool.ntp.org 3.opnsense.pool.ntp.org</timeservers>
    <webgui>
      <protocol>https</protocol>
      {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/system/webgui/ssl-certref") }}
    </webgui>
    <disablenatreflection>yes</disablenatreflection>
    <usevirtualterminal>1</usevirtualterminal>
    <ipv6allow/>
    <powerd_ac_mode>hadp</powerd_ac_mode>
    <powerd_battery_mode>hadp</powerd_battery_mode>
    <powerd_normal_mode>hadp</powerd_normal_mode>
    <bogons>
      <interval>monthly</interval>
    </bogons>
    {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/system/backupcount") }}
    <crypto_hardware>aesni</crypto_hardware>
    <pf_share_forward>1</pf_share_forward>
    <lb_use_sticky>1</lb_use_sticky>
    <ssh>
      <group>admins</group>
    </ssh>
    <backup>
      <nextcloud version="1.0.0">
        <enabled>0</enabled>
        <url/>
        <user/>
        <password/>
        <password_encryption/>
        <backupdir>OPNsense-Backup</backupdir>
      </nextcloud>
    </backup>
    <language>en_US</language>
    <firmware>
      {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/system/firmware/plugins") }}
    </firmware>
    {% if [ansible_processor|d([])] | flatten | join("\n") | regex_search("AMD") %}
    <thermal_hardware>amdtemp</thermal_hardware>
    {% endif %}
  </system>
  <interfaces>
{% for interface in interfaces|sort(attribute="id") %}
    <{{ interface_name_to_opnsense_if_name_map[interface.name] }}>
      <if>{{ interface.name }}</if>
      <descr>{{ interface.description }}</descr>
      <enable>{{ 1 if interface.enabled else 0 }}</enable>
{%     if interface.ip_addresses %}
      <ipaddr>{{ interface.ip_addresses[0].address | ansible.netcommon.ipaddr('address') }}</ipaddr>
      <subnet>{{ interface.ip_addresses[0].address | ansible.netcommon.ipaddr('prefix') }}</subnet>
{%     elif interface.description.startswith("vpn_") %}
{%     else %}
      <ipaddr>dhcp</ipaddr>
      <ipaddrv6>dhcp6</ipaddrv6>
      <media/>
      <mediaopt/>
      <dhcp6-ia-pd-len>0</dhcp6-ia-pd-len>
      <gateway/>
{%     endif %}
      <blockbogons>1</blockbogons>
    </{{ interface_name_to_opnsense_if_name_map[interface.name] }}>
{% endfor %}
    <lo0>
      <internal_dynamic>1</internal_dynamic>
      <descr>Loopback</descr>
      <enable>1</enable>
      <if>lo0</if>
      <ipaddr>127.0.0.1</ipaddr>
      <ipaddrv6>::1</ipaddrv6>
      <subnet>8</subnet>
      <subnetv6>128</subnetv6>
      <type>none</type>
      <virtual>1</virtual>
    </lo0>
  </interfaces>
  <vlans>
  {% for vlan in vlans|sort(attribute="vid") if vlan.mode == 'tagged' %}
    <vlan>
      <if>{{ vlan.interface.name.split('_')[0] }}</if>
      <tag>{{ vlan.vid }}</tag>
      <pcp/>
      <descr>{{ vlan.name }}</descr>
      <vlanif>{{ vlan.interface.name }}</vlanif>
    </vlan>
  {% endfor %}
  </vlans>
  <dhcpd>
{% for interface in interfaces|sort(attribute="id") %}
{%   if interface.ip_addresses %}
    <{{ interface_name_to_opnsense_if_name_map[interface.name] }}>
      <enable>{{ 1 if interface.enabled else 0 }}</enable>
      <ddnsdomainalgorithm>hmac-md5</ddnsdomainalgorithm>
      <numberoptions>
        <item/>
      </numberoptions>
      <range>
        <from>{{ interface.ip_addresses[0].address | ansible.netcommon.ipaddr( 30) | ansible.netcommon.ipaddr('address') }}</from>
        <to>{{   interface.ip_addresses[0].address | ansible.netcommon.ipaddr(-11) | ansible.netcommon.ipaddr('address') }}</to>
      </range>
      <winsserver/>
      <dnsserver/>
      <ntpserver/>
      {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/dhcpd/" + interface_name_to_opnsense_if_name_map[interface.name] + "/staticmap") }}
    </{{ interface_name_to_opnsense_if_name_map[interface.name] }}>
  {% endif %}
{% endfor %}
  </dhcpd>
  <unbound>
    <enable>on</enable>
  </unbound>
  <snmpd>
    <syslocation/>
    <syscontact/>
    <rocommunity>public</rocommunity>
  </snmpd>
  <syslog>
    <reverse/>
  </syslog>
  <filter>
    <rule>
      <type>pass</type>
      <ipprotocol>inet</ipprotocol>
      {{ print_rule_ansible_managed("Default allow LAN to any rule.") | indent(6) }}
      <interface>lan</interface>
      <source>
        <network>lan</network>
      </source>
      <destination>
        <any/>
      </destination>
    </rule>
    {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/filter/rule[not(contains(descr, 'Ansible managed.'))]") }}
  </filter>
  {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/nat") }}
  <rrd>
    <enable/>
  </rrd>
  <load_balancer>
    <monitor_type>
      <name>ICMP</name>
      <type>icmp</type>
      <descr>ICMP</descr>
      <options/>
    </monitor_type>
    <monitor_type>
      <name>TCP</name>
      <type>tcp</type>
      <descr>Generic TCP</descr>
      <options/>
    </monitor_type>
    <monitor_type>
      <name>HTTP</name>
      <type>http</type>
      <descr>Generic HTTP</descr>
      <options>
        <path>/</path>
        <host/>
        <code>200</code>
      </options>
    </monitor_type>
    <monitor_type>
      <name>HTTPS</name>
      <type>https</type>
      <descr>Generic HTTPS</descr>
      <options>
        <path>/</path>
        <host/>
        <code>200</code>
      </options>
    </monitor_type>
    <monitor_type>
      <name>SMTP</name>
      <type>send</type>
      <descr>Generic SMTP</descr>
      <options>
        <send/>
        <expect>220 *</expect>
      </options>
    </monitor_type>
  </load_balancer>
  <ntpd>
    <prefer>0.opnsense.pool.ntp.org</prefer>
  </ntpd>
  {{ lookup("xmlfile", local_config_path_leader, xpath="//opnsense/widgets") }}
  {{ lookup("xmlfile", local_config_path_leader, xpath="//opnsense/revision") }}
  <OPNsense>
    <Firewall>
      <Alias version="1.0.0">
        <geoip>
          <url/>
        </geoip>
        <aliases/>
      </Alias>
    </Firewall>
    <captiveportal version="1.0.0">
      <zones/>
      <templates/>
    </captiveportal>
    <cron version="1.0.1">
      <jobs/>
    </cron>
    <Netflow version="1.0.1">
      <capture>
        <interfaces/>
        <egress_only/>
        <version>v9</version>
        <targets/>
      </capture>
      <collect>
        <enable>0</enable>
      </collect>
      <activeTimeout>1800</activeTimeout>
      <inactiveTimeout>15</inactiveTimeout>
    </Netflow>
    <IDS version="1.0.5">
      <rules/>
      <userDefinedRules/>
      <files/>
      <fileTags/>
      <general>
        <enabled>0</enabled>
        <ips>0</ips>
        <promisc>0</promisc>
        <interfaces>wan</interfaces>
        <homenet>192.168.0.0/16,10.0.0.0/8,172.16.0.0/12</homenet>
        <defaultPacketSize/>
        <UpdateCron/>
        <AlertLogrotate>W0D23</AlertLogrotate>
        <AlertSaveLogs>4</AlertSaveLogs>
        <MPMAlgo>ac</MPMAlgo>
        <detect>
          <Profile>medium</Profile>
          <toclient_groups/>
          <toserver_groups/>
        </detect>
        <syslog>0</syslog>
        <syslog_eve>0</syslog_eve>
        <LogPayload>0</LogPayload>
      </general>
    </IDS>
    <Interfaces>
      <vxlans/>
      <loopbacks/>
    </Interfaces>
    <monit version="1.0.8">
      <general>
        <enabled>0</enabled>
        <interval>120</interval>
        <startdelay>120</startdelay>
        <mailserver>127.0.0.1</mailserver>
        <port>25</port>
        <username/>
        <password/>
        <ssl>0</ssl>
        <sslversion>auto</sslversion>
        <sslverify>1</sslverify>
        <logfile>syslog facility log_daemon</logfile>
        <statefile/>
        <eventqueuePath/>
        <eventqueueSlots/>
        <httpdEnabled>0</httpdEnabled>
        <httpdUsername>root</httpdUsername>
        <httpdPassword>6yqmPxbENQMwI58QVHa</httpdPassword>
        <httpdPort>2812</httpdPort>
        <httpdAllow/>
        <mmonitUrl/>
        <mmonitTimeout>5</mmonitTimeout>
        <mmonitRegisterCredentials>1</mmonitRegisterCredentials>
      </general>
      <alert uuid="67fbf140-441a-474e-824c-cf726416548b">
        <enabled>0</enabled>
        <recipient>root@localhost.local</recipient>
        <noton>0</noton>
        <events/>
        <format/>
        <reminder>10</reminder>
        <description/>
      </alert>
      <service uuid="5859ce5d-5c62-4b11-93c2-703fca3113d1">
        <enabled>1</enabled>
        <name>$HOST</name>
        <type>system</type>
        <pidfile/>
        <match/>
        <path/>
        <timeout>300</timeout>
        <address/>
        <interface/>
        <start/>
        <stop/>
        <tests>61e0a048-6e67-49f6-b1e3-b9a5fb0a4b06,bffcec47-86b6-4390-9612-9a979014de13,be36c81f-737b-45ab-9b62-6cd73bf9e1ce,f64a6dca-9e5d-4daa-87e2-e11f9c7c1130</tests>
        <depends/>
      </service>
      <service uuid="3e9e1314-f8ea-409f-b7fd-a4e193c23ad1">
        <enabled>1</enabled>
        <name>RootFs</name>
        <type>filesystem</type>
        <pidfile/>
        <match/>
        <path>/</path>
        <timeout>300</timeout>
        <address/>
        <interface/>
        <start/>
        <stop/>
        <tests>6618d148-bea3-4807-b3a7-390a6f4b4563</tests>
        <depends/>
      </service>
      <service uuid="5a8b0ea5-c9ee-4ac2-8f63-6d10ac5ef884">
        <enabled>0</enabled>
        <name>carp_status_change</name>
        <type>custom</type>
        <pidfile/>
        <match/>
        <path>/usr/local/opnsense/scripts/OPNsense/Monit/carp_status</path>
        <timeout>300</timeout>
        <address/>
        <interface/>
        <start/>
        <stop/>
        <tests>c0aea468-9a0b-4fc4-b1b1-50d60a54a331</tests>
        <depends/>
      </service>
      <service uuid="d3961d69-ec2b-49af-b51d-890a464dd036">
        <enabled>0</enabled>
        <name>gateway_alert</name>
        <type>custom</type>
        <pidfile/>
        <match/>
        <path>/usr/local/opnsense/scripts/OPNsense/Monit/gateway_alert</path>
        <timeout>300</timeout>
        <address/>
        <interface/>
        <start/>
        <stop/>
        <tests>92889cb7-ce7e-4e81-9a7d-7e18bc4c1a56</tests>
        <depends/>
      </service>
      <test uuid="bd581206-c280-4100-af98-60e890d6178c">
        <name>Ping</name>
        <type>NetworkPing</type>
        <condition>failed ping</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="bc0ee325-a16c-494f-a626-019fd0a0caf9">
        <name>NetworkLink</name>
        <type>NetworkInterface</type>
        <condition>failed link</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="dda50f51-16e3-4cf6-9838-3f2205bf6d97">
        <name>NetworkSaturation</name>
        <type>NetworkInterface</type>
        <condition>saturation is greater than 75%</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="61e0a048-6e67-49f6-b1e3-b9a5fb0a4b06">
        <name>MemoryUsage</name>
        <type>SystemResource</type>
        <condition>memory usage is greater than 75%</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="bffcec47-86b6-4390-9612-9a979014de13">
        <name>CPUUsage</name>
        <type>SystemResource</type>
        <condition>cpu usage is greater than 75%</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="be36c81f-737b-45ab-9b62-6cd73bf9e1ce">
        <name>LoadAvg1</name>
        <type>SystemResource</type>
        <condition>loadavg (1min) is greater than 2</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="f64a6dca-9e5d-4daa-87e2-e11f9c7c1130">
        <name>LoadAvg5</name>
        <type>SystemResource</type>
        <condition>loadavg (5min) is greater than 1.5</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="e21ae61c-53af-4d86-9ff5-e707a4b1491d">
        <name>LoadAvg15</name>
        <type>SystemResource</type>
        <condition>loadavg (15min) is greater than 1</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="6618d148-bea3-4807-b3a7-390a6f4b4563">
        <name>SpaceUsage</name>
        <type>SpaceUsage</type>
        <condition>space usage is greater than 75%</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="c0aea468-9a0b-4fc4-b1b1-50d60a54a331">
        <name>ChangedStatus</name>
        <type>ProgramStatus</type>
        <condition>changed status</condition>
        <action>alert</action>
        <path/>
      </test>
      <test uuid="92889cb7-ce7e-4e81-9a7d-7e18bc4c1a56">
        <name>NonZeroStatus</name>
        <type>ProgramStatus</type>
        <condition>status != 0</condition>
        <action>alert</action>
        <path/>
      </test>
    </monit>
    <OpenVPNExport version="0.0.1">
      <servers/>
    </OpenVPNExport>
    <proxy version="1.0.3">
      <general>
        <enabled>0</enabled>
        <error_pages>opnsense</error_pages>
        <icpPort/>
        <logging>
          <enable>
            <accessLog>1</accessLog>
            <storeLog>1</storeLog>
          </enable>
          <ignoreLogACL/>
          <target/>
        </logging>
        <alternateDNSservers/>
        <dnsV4First>0</dnsV4First>
        <forwardedForHandling>on</forwardedForHandling>
        <uriWhitespaceHandling>strip</uriWhitespaceHandling>
        <useViaHeader>1</useViaHeader>
        <suppressVersion>0</suppressVersion>
        <connecttimeout/>
        <VisibleEmail>admin@localhost.local</VisibleEmail>
        <VisibleHostname/>
        <cache>
          <local>
            <enabled>0</enabled>
            <directory>/var/squid/cache</directory>
            <cache_mem>256</cache_mem>
            <maximum_object_size/>
            <size>100</size>
            <l1>16</l1>
            <l2>256</l2>
            <cache_linux_packages>0</cache_linux_packages>
            <cache_windows_updates>0</cache_windows_updates>
          </local>
        </cache>
        <traffic>
          <enabled>0</enabled>
          <maxDownloadSize>2048</maxDownloadSize>
          <maxUploadSize>1024</maxUploadSize>
          <OverallBandwidthTrotteling>1024</OverallBandwidthTrotteling>
          <perHostTrotteling>256</perHostTrotteling>
        </traffic>
        <parentproxy>
          <enabled>0</enabled>
          <host/>
          <enableauth>0</enableauth>
          <user>username</user>
          <password>password</password>
          <port/>
          <localdomains/>
          <localips/>
        </parentproxy>
      </general>
      <forward>
        <interfaces>lan</interfaces>
        <port>3128</port>
        <sslbumpport>3129</sslbumpport>
        <sslbump>0</sslbump>
        <sslurlonly>0</sslurlonly>
        <sslcertificate/>
        <sslnobumpsites/>
        <ssl_crtd_storage_max_size>4</ssl_crtd_storage_max_size>
        <sslcrtd_children>5</sslcrtd_children>
        <snmp_enable>0</snmp_enable>
        <snmp_port>3401</snmp_port>
        <snmp_password>public</snmp_password>
        <ftpInterfaces/>
        <ftpPort>2121</ftpPort>
        <ftpTransparentMode>0</ftpTransparentMode>
        <addACLforInterfaceSubnets>1</addACLforInterfaceSubnets>
        <transparentMode>0</transparentMode>
        <acl>
          <allowedSubnets/>
          <unrestricted/>
          <bannedHosts/>
          <whiteList/>
          <blackList/>
          <browser/>
          <mimeType/>
          <safePorts>80:http,21:ftp,443:https,70:gopher,210:wais,1025-65535:unregistered ports,280:http-mgmt,488:gss-http,591:filemaker,777:multiling http</safePorts>
          <sslPorts>443:https</sslPorts>
          <remoteACLs>
            <blacklists/>
            <UpdateCron/>
          </remoteACLs>
        </acl>
        <icap>
          <enable>0</enable>
          <RequestURL>icap://[::1]:1344/avscan</RequestURL>
          <ResponseURL>icap://[::1]:1344/avscan</ResponseURL>
          <SendClientIP>1</SendClientIP>
          <SendUsername>0</SendUsername>
          <EncodeUsername>0</EncodeUsername>
          <UsernameHeader>X-Username</UsernameHeader>
          <EnablePreview>1</EnablePreview>
          <PreviewSize>1024</PreviewSize>
          <OptionsTTL>60</OptionsTTL>
          <exclude/>
        </icap>
        <authentication>
          <method/>
          <authEnforceGroup/>
          <realm>OPNsense proxy authentication</realm>
          <credentialsttl>2</credentialsttl>
          <children>5</children>
        </authentication>
      </forward>
      <pac/>
      <error_pages>
        <template/>
      </error_pages>
    </proxy>
    <Syslog version="1.0.0">
      <general>
        <enabled>1</enabled>
      </general>
      <destinations/>
    </Syslog>
    <TrafficShaper version="1.0.3">
      <pipes/>
      <queues/>
      <rules/>
    </TrafficShaper>
    <unboundplus>
      <dnsbl version="0.0.1">
        <service_enabled/>
        <enabled>0</enabled>
        <type/>
        <lists/>
        <whitelists/>
      </dnsbl>
      <miscellaneous version="0.0.2">
        <privatedomain/>
        <dotservers/>
      </miscellaneous>
    </unboundplus>
    <wireguard>
      <server version="0.0.2">
      {# Integrate with https://github.com/ypid/ansible-wireguard/tree/prepare-for-debops #}
      {% if wireguard_remote_directory|d() %}
        {{ lookup("xmlfile", wireguard_remote_directory + "/" + wireguard_interface + "_server.xml", xpath=".") }}
      {% endif %}
      </server>
      <general version="0.0.1">
        <enabled>1</enabled>
      </general>
      <client version="0.0.5">
      {% if wireguard_remote_directory|d() %}
        {{ lookup("xmlfile", wireguard_remote_directory + "/" + wireguard_interface + "_client.xml", xpath=".") }}
      {% endif %}
      </client>
    </wireguard>
  </OPNsense>
  <gateways>
    <gateway_item/>
  </gateways>
  {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/ca") }}
  {{ lookup("xmlfile", local_config_path_fetch, xpath="//opnsense/cert") }}
  <staticroutes version="1.0.0">
    {% if opnsense_blackhole_private_nets|d()|bool %}
    <route uuid="f9b58ccb-e871-4484-b048-917a954ad31f">
      <network>192.168.0.0/16</network>
      <gateway>Null4</gateway>
      <descr>Blackhole RFC 1918.</descr>
      <disabled>0</disabled>
    </route>
    <route uuid="72a22cc3-3719-4edb-8f05-16322f99b421">
      <network>172.16.0.0/12</network>
      <gateway>Null4</gateway>
      <descr>Blackhole RFC 1918.</descr>
      <disabled>0</disabled>
    </route>
    <route uuid="2825cd5b-f516-41dd-9175-93881dcef9ca">
      <network>10.0.0.0/8</network>
      <gateway>Null4</gateway>
      <descr>Blackhole RFC 1918.</descr>
      <disabled>0</disabled>
    </route>
    <route uuid="6aa58d7b-6c7f-44ec-a52f-af9daad8495b">
      <network>169.254.0.0/16</network>
      <gateway>Null4</gateway>
      <descr>Blackhole private IPv4 ARPA.</descr>
      <disabled>0</disabled>
    </route>
    {% endif %}
  </staticroutes>
  <ppps>
    <ppp/>
  </ppps>
</opnsense>
