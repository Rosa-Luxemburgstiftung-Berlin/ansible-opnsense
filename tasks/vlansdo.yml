---

- name: vlans - create vlans
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/vlans/vlan[tag/text()='{{ _vlan.tag }}']/{{ _vlansettings.key }}"
    value: "{{ _vlansettings.value }}"
    pretty_print: true
  notify: reconfigure vlans
  with_items:
    - "{{ _vlan.settings }}"
  loop_control:
    label: "{{ _vlan.tag }} {{ _vlansettings.key }}"
    loop_var: _vlansettings

- name: vlans - setting if
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/vlans/vlan[tag/text()='{{ _vlan.tag }}']/if"
    value: "{{ _vlan.vlan_parent_interface | default(opn_interfaces_vlan_parent_interface) }}"
    pretty_print: true
  notify: reconfigure vlans

- name: vlans - setting vlanif
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/vlans/vlan[tag/text()='{{ _vlan.tag }}']/vlanif"
    value: "{{ _vlan.vlan_parent_interface | default(opn_interfaces_vlan_parent_interface) }}_vlan{{ _vlan.tag }}"
    pretty_print: true
  notify: reconfigure vlans

- name: vlans - define uuid
  ansible.builtin.set_fact:
    _uuid: "{{ _vlan.uuid | default(_vlan.tag | to_uuid) }}"

- name: vlans - set uuid
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/vlans/vlan[tag/text()='{{ _vlan.tag }}']"
    attribute: uuid
    value: "{{ _uuid }}"
    pretty_print: true
  notify: reconfigure vlans

...
