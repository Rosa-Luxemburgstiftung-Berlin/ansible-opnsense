---


# examples
#
# opn_interfaces_specific:
#   - interface: lan
#     settings:
#     - key: if
#       value: ixl1
#     - key: descr
#       value: MGMT
#     - key: enable
#       value: 1
#     - key: lock
#       value: 1
#     - key: ipaddr
#       value: 172.1.0.1
#     - key: subnet
#       value: 28
#   - interface: wan
#     settings:
#     - key: if
#       value: ixl0
#     - key: descr
#       value: WAN
#     - key: enable
#       value: 1
#     - key: lock
#       value: 1
#     - key: ipaddr
#       value: 140.82.121.4
#     - key: subnet
#       value: 27
#     - key: gateway
#       value: GW_WAN
#   - interface: fwlink
#     settings:
#     - key: if
#       value: lagg0
#     - key: descr
#       value: FWUplink
#     - key: enable
#       value: 1
#     - key: lock
#       value: 1
#     - key: ipaddr
#       value: 192.168.0.1
#     - key: subnet
#       value: 28
#   - interface: DMZ_300
#     vlan: 300
#     vlan_parent_interface: lagg1
#     settings:
#       # - key: if
#       #   value: lagg1_vlan300
#       - key: descr
#         value: DMZ_300
#       - key: lock
#         value: 1
#       - key: enable
#         value: 1
#       - key: ipaddr
#         value: 10.1.0.1
#       - key: subnet
#         value: 28
#   - interface: SPK8_705
#     vlan: 705
#     vlan_parent_interface: ixl1
#     settings:
#       # - key: if
#       #   value: ixl1_vlan705
#       - key: descr
#         value: MGMT_705
#       - key: lock
#         value: 1
#       - key: enable
#         value: 0  # disabled
#       - key: ipaddr
#         value: 172.10.10.1
#       - key: subnet
#         value: 24
#
# opn_ifgroups:
#   - ifname: WANG
#     members: WAN1 WAN2
#     descr: Group of all outbound WAN interfaces


- name: interfaces - deprecated opn_interfaces_remove
  ansible.builtin.pause:
    prompt: "usage of 'opn_interfaces_remove' is deprecated, please use the generic 'opn_unset' var instead"
  when: opn_interfaces_remove is defined

- name: interfaces - remove interface
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/interfaces/{{ item }}
    state: absent
    pretty_print: true
  with_items: "{{ opn_interfaces_remove }}"
  when: opn_interfaces_remove is defined

- name: interfaces - settings specific for an interface
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/interfaces/{{ item.0.interface }}/{{ item.1.key }}
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_interfaces_specific }}"
    - settings
  when:
    - opn_interfaces_specific is defined
    - item.1.key != 'enable'

- name: interfaces - settings specific for enabling interfaces
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/interfaces/{{ item.0.interface }}/{{ item.1.key }}
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_interfaces_specific }}"
    - settings
  when:
    - opn_interfaces_specific is defined
    - item.1.key == 'enable' and item.1.value == 1

- name: interfaces - settings specific for disabled interfaces
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/interfaces/{{ item.0.interface }}/{{ item.1.key }}
    state: absent
    pretty_print: true
  with_subelements:
    - "{{ opn_interfaces_specific }}"
    - settings
  when:
    - opn_interfaces_specific is defined
    - item.1.key == 'enable' and item.1.value == 0

- name: interfaces - settings that apply to all interfaces
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/interfaces/{{ item.1 }}/{{ item.0.key }}"
    value: "{{ item.0.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_interfaces_all }}"
    - interfaces
  when: opn_interfaces_all is defined

- name: interfaces - set vlan parent interface
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/interfaces/{{ item.0.interface }}/if
    value: "{{ item.0.vlan_parent_interface | default(opn_interfaces_vlan_parent_interface) }}_vlan{{ item.0.vlan }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_interfaces_specific }}"
    - settings
  when: opn_interfaces_specific is defined and item.0.vlan is defined

- name: create ifgroups
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/ifgroups
    state: present
    pretty_print: true
  when: opn_ifgroups is defined

- name: create ifgroupentry  # noqa jinja[spacing]
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/ifgroups
    set_children: "[
      {% for ifgroupentry in opn_ifgroups -%}
        '<ifgroupentry>
        {% for k, v in ifgroupentry.iteritems() -%}
          <{{ k }}>{{ v }}</{{ k }}>
        {%- endfor %}
        </ifgroupentry>',
      {%- endfor %}
      ]"
    input_type: xml
    pretty_print: true
  when: opn_ifgroups is defined
...
