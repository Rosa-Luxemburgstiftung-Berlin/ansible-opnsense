---
# ca / cert definitions
# see test/ca-test*.yml for examples

#######
# CAs #
#######

- name: check if we have a old legacy xml with CAs without uuid attribute
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/ca[not(@uuid)]/refid
    count: true
  register: _configured_old_ca_count
  when: opn_cas is defined and opn_cas

- name: apply uuid to CAs without uuid attribute
  when:
    - opn_cas is defined and opn_cas
    - _configured_old_ca_count.count | int > 0
  block:

    - name: read configured CAs without uuid attribute from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: /opnsense/ca[not(@uuid)]/refid
        content: text
      register: _configured_old_ca

    - name: add uuid attribute to CAs without uuid attribute
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: "/opnsense/ca[refid/text()='{{ item.refid }}']"
        attribute: uuid
        value: "{{ item.uuid | default(item.refid | to_uuid) }}"
      when:
        - item.refid is defined
        - item.refid in (_configured_old_ca.matches | map(attribute='refid'))
      with_items:
        - "{{ opn_cas | default([]) }}"

- name: check if we have configured CAs with uuid in saved xml
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/ca[@uuid]/refid
    count: true
  register: _configured_ca_count
  when: opn_cas is defined and opn_cas

- name: get uuid for CAs from saved cfg
  when:
    - opn_cas is defined and opn_cas
    - _configured_ca_count.count | int > 0
  block:

    - name: read configured CAs from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: /opnsense/ca[@uuid]/refid
        content: text
      register: _configured_ca

    - name: read uuid for configured CAs from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: "/opnsense/ca[refid/text()='{{ item }}']"
        content: attribute
      register: _configured_ca_uuid
      with_items: "{{ _configured_ca.matches | map(attribute='refid') }}"

    - name: construct map of configured CAs with uuid
      ansible.builtin.set_fact:
        _configured_ca2uuid: "{{ (_configured_ca2uuid | default({})) | combine({item['item']: item['matches'][0]['ca']['uuid']}) }}"
      with_items: "{{ _configured_ca_uuid.results }}"

- name: CAs - certificate authorities
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ca[@uuid='{{ item.0.uuid | default(_configured_ca2uuid[item.0.refid]) | default(item.0.refid | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_cas | default([]) }}"
    - settings
  when: item.1.value is defined

- name: CAs - certificate authorities refid
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ca[@uuid='{{ item.uuid | default(_configured_ca2uuid[item.refid]) | default(item.refid | to_uuid) }}']/refid"
    value: "{{ item.refid }}"
    pretty_print: true
  with_items:
    - "{{ opn_cas | default([]) }}"
  when: item.refid is defined

- name: b64 CAs fields
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ca[@uuid='{{ item.0.uuid | default(_configured_ca2uuid[item.0.refid]) | default(item.0.refid | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.b64_value | b64encode }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_cas | default([]) }}"
    - settings
  when: item.1.b64_value is defined

# remove the default empty <ca/> node remains after configuring the first one
- name: CAs - remove default empty node
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/ca[not(node())]
    state: absent
  when: opn_cas | default([]) | length > 0

################
# certificates #
################

- name: check if we have a old legacy xml with certificates without uuid attribute
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/cert[not(@uuid)]/refid
    count: true
  register: _configured_old_cert_count
  when: opn_certs is defined and opn_certs

- name: apply uuid to certificates without uuid attribute
  when:
    - opn_certs is defined and opn_certs
    - _configured_old_cert_count.count | int > 0
  block:

    - name: read configured certificates without uuid attribute from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: /opnsense/cert[not(@uuid)]/refid
        content: text
      register: _configured_old_cert

    - name: add uuid attribute to certificates without uuid attribute
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: "/opnsense/cert[refid/text()='{{ item.refid }}']"
        attribute: uuid
        value: "{{ item.uuid | default(item.refid | to_uuid) }}"
      when:
        - item.refid is defined
        - item.refid in (_configured_old_cert.matches | map(attribute='refid'))
      with_items:
        - "{{ opn_certs | default([]) }}"

- name: check if we have configured certificates with uuid in saved xml
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/cert[@uuid]/refid
    count: true
  register: _configured_cert_count
  when: opn_certs is defined and opn_certs

- name: get uuid for certificates from saved cfg
  when:
    - opn_certs is defined and opn_certs
    - _configured_cert_count.count | int > 0
  block:

    - name: read configured certificates from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: /opnsense/cert[@uuid]/refid
        content: text
      register: _configured_cert

    - name: read uuid for configured certificates from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: "/opnsense/cert[refid/text()='{{ item }}']"
        content: attribute
      register: _configured_cert_uuid
      with_items: "{{ _configured_cert.matches | map(attribute='refid') }}"

    - name: construct map of configured certificates with uuid
      ansible.builtin.set_fact:
        _configured_cert2uuid: "{{ (_configured_cert2uuid | default({})) | combine({item['item']: item['matches'][0]['cert']['uuid']}) }}"
      with_items: "{{ _configured_cert_uuid.results }}"

- name: certificates
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/cert[@uuid='{{ item.0.uuid | default(_configured_cert_uuid[item.0.refid]) | default(item.0.refid | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_certs | default([]) }}"
    - settings
  when: item.1.value is defined

- name: certificates refid
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/cert[@uuid='{{ item.uuid | default(_configured_cert_uuid[item.refid]) | default(item.refid | to_uuid) }}']/refid"
    value: "{{ item.refid }}"
    pretty_print: true
  with_items:
    - "{{ opn_certs | default([]) }}"
  when: item.refid is defined

- name: b64 certificate fields
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/cert[@uuid='{{ item.0.uuid | default(_configured_cert_uuid[item.0.refid]) | default(item.0.refid | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.b64_value | b64encode }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_certs | default([]) }}"
    - settings
  when: item.1.b64_value is defined

# remove the default empty <cert/> node remains after configuring the first one
- name: cert - remove default empty node
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/cert[not(node())]
    state: absent
  when: opn_certs | default([]) | length > 0

...
