# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
---

# definition:
# opn_ipsec:
#   enable: 1  # set to 0 to disable ipsec and explicit to 1 do enable a disabled ipsec service
#   ipsec_asn: 1
#   ipsec_chd: 1
#   ... # other globalsettings like passthrough_networks, ...
#   ikeids: # dict: ikeid is the key !
#     1:
#       phase1: # dict
#         descr: s2s ...
#         iketype: ikev1
#         interface: wan
#         mode: main
#         protocol: inet
#         ...
#         encryption-algorithm:
#           name: aes
#           keylen: 256
#       phase2_defaults: # common settings for all phase2 elements in this ikeid
#         #disabled: 0 # use this if you like to ensure all tunnels are enabled as long as they are not explicitly disabled
#         pfsgroup: 2
#         lifetime: 3600
#         protocol: esp
#         localid:
#           type: lan
#         encryption-algorithm-options:
#           - name: aes
#             keylen: auto
#           - name: blowfish
#             keylen: auto
#           - name: 3des
#         hash-algorithm-options:
#           - hmac_md5
#           - hmac_sha1
#       phase2: # dict using the uniqid as key (see: http://php.net/uniqid or https://pypi.org/project/uniqid/)
#         615472633b5ee:
#           #disabled: 1 # this way you can disable a phase2 entry without deleting it; a disabled p2 entry must be enabled by explicitly setting disabled: 0
#           descr: ...
#           pinghost: ...
#           ...
#           remoteid:
#             type: network
#             address: 192.168.0.0
#             netbits: 24
#         ...
# ...

- name: IPSec settings
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: true
  with_dict:
    - "{{ opn_ipsec | default({}) }}"
  when:
    - item.key != 'ikeids'
    - not (item.key == 'enable' and item.value|int != 1)

- name: IPSec disable
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/{{ item.key }}"
    state: absent
    pretty_print: true
  with_dict:
    - "{{ opn_ipsec | default({}) }}"
  when:
    - item.key == 'enable' and item.value|int != 1

- name: IPSec loop ikeids for phase1 ...
  ansible.builtin.include_tasks: ipsecphase1.yml
  vars:
    ikeid: "{{ ikeids.key }}"
    ipsecphasevar: "{{ ikeids.value }}"
  with_dict:
    - "{{ opn_ipsec.ikeids | default({}) }}"
  loop_control:
    loop_var: ikeids

...
