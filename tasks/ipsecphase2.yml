# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
---

- name: "IPSec ike phase2 {{ uniqid }} for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: true
  with_dict:
    - "{{ ipsecphasevar2[uniqid] | default({}) }}"
  when:
    - not item.key == 'localid'
    - not item.key == 'remoteid'
    - not item.key == 'encryption-algorithm-options'
    - not item.key == 'hash-algorithm-options'
    - not (item.key == 'disabled' and item.value|int == 0)

- name: "IPSec ike phase2 {{ uniqid }} for ikeid {{ ikeid }} enable"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/{{ item.key }}"
    state: absent
    pretty_print: true
  with_dict:
    - "{{ ipsecphasevar2[uniqid] | default({}) }}"
  when:
    - item.key == 'disabled' and item.value|int == 0

- name: "IPSec ike phase2 {{ uniqid }} localid for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/localid/{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: true
  with_dict:
    - "{{ ipsecphasevar2[uniqid].localid | default({}) }}"

- name: "IPSec ike phase2 {{ uniqid }} remoteid for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/remoteid/{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: true
  with_dict:
    - "{{ ipsecphasevar2[uniqid].remoteid | default({}) }}"

# /encryption-algorithm-option can be defined multiple times as
#      <encryption-algorithm-option>
#        <name>aes192</name>
#      </encryption-algorithm-option>
#      <encryption-algorithm-option>
#        <name>aes256</name>
#      </encryption-algorithm-option>
#      <encryption-algorithm-option>
#        <name>aes128gcm16</name>
#      </encryption-algorithm-option>

- name: "IPSec ike phase2 {{ uniqid }} count encryption-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/encryption-algorithm-option/name"
    count: true
  register: eao_count

- name: debug eao_count
  ansible.builtin.debug:
    var: eao_count
    verbosity: 1

- name: "IPSec ike phase2 {{ uniqid }} get defined encryption-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/encryption-algorithm-option/name"
    content: text
  register: eao_matches
  when: eao_count.count > 0

- name: debug eao_matches
  ansible.builtin.debug:
    var: eao_matches
    verbosity: 1
  when: eao_matches is defined

- name: "IPSec ike phase2 {{ uniqid }} get defined list of encryption-algorithm-options for ikeid {{ ikeid }}"
  ansible.builtin.set_fact:
    eao_list: "{{ eao_matches.matches | list | map(attribute='name') | list | flatten }}"
  when: eao_matches is defined

- name: debug eao_list
  ansible.builtin.debug:
    var: eao_list
    verbosity: 1
  when: eao_list is defined

- name: "IPSec ike phase2 {{ uniqid }} get encryption-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/encryption-algorithm-option[name='{{ item.name }}']"
    count: true
  register: encalgopt
  with_items:
    - "{{ ipsecphasevar2[uniqid]['encryption-algorithm-options'] | default([]) }}"
  when: eao_count.count > 0

- name: debug encalgopt
  ansible.builtin.debug:
    var: encalgopt
    verbosity: 1
  when: encalgopt is defined

- name: "IPSec ike phase2 {{ uniqid }} check reset of encryption-algorithm-options for ikeid {{ ikeid }} (1)"
  ansible.builtin.set_fact:
    encalgopt_reset: true
  when:
    - eao_count.count != (ipsecphasevar2[uniqid]['encryption-algorithm-options'] | length)

- name: "IPSec ike phase2 {{ uniqid }} check reset of encryption-algorithm-options for ikeid {{ ikeid }} (2)"
  ansible.builtin.set_fact:
    encalgopt_reset: true
  when:
    - item.count is defined and item.count == 0
  with_items:
    - "{{ encalgopt.results }}"

- name: debug encalgopt_reset
  ansible.builtin.debug:
    var: encalgopt_reset
    verbosity: 1
  when: encalgopt_reset is defined

- name: "IPSec ike phase2 {{ uniqid }} reset encryption-algorithm-options for ikeid {{ ikeid }} ..."
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/encryption-algorithm-option[name='{{ item.name }}']"
    state: absent
    pretty_print: true
  with_items:
    - "{{ ipsecphasevar2[uniqid]['encryption-algorithm-options'] | default([]) }}"
  when: encalgopt_reset | default(false)

- name: "IPSec ike phase2 {{ uniqid }} create encryption-algorithm-options for ikeid {{ ikeid }}"  # noqa jinja[spacing]
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']"
    add_children: "[
      {% for eao in ipsecphasevar2[uniqid]['encryption-algorithm-options'] -%}
        '<encryption-algorithm-option><name>{{ eao.name }}</name></encryption-algorithm-option>',
      {%- endfor %}
      ]"
    input_type: xml
    pretty_print: true
  when: encalgopt_reset | default(false)

- name: "IPSec ike phase2 {{ uniqid }} encryption-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/encryption-algorithm-option[name='{{ item.name }}']/keylen"
    value: "{{ item.keylen }}"
    pretty_print: true
  with_items:
    - "{{ ipsecphasevar2[uniqid]['encryption-algorithm-options'] | default([]) }}"
  when: item.keylen is defined

# can be multiple
#      <hash-algorithm-option>hmac_sha1</hash-algorithm-option>
#      <hash-algorithm-option>hmac_sha256</hash-algorithm-option>
#      <hash-algorithm-option>hmac_sha384</hash-algorithm-option>
#      <hash-algorithm-option>hmac_sha512</hash-algorithm-option>

- name: "IPSec ike phase2 {{ uniqid }} for ikeid {{ ikeid }} : get hash-algorithm-option count"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/hash-algorithm-option"
    count: true
  register: hashalgopt_count

- name: "IPSec ike phase2 {{ uniqid }} for ikeid {{ ikeid }} : get hash-algorithm-option elements"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/hash-algorithm-option"
    content: text
  register: hashalgopt
  when: hashalgopt_count.count > 0

- name: debug hashalgopt
  ansible.builtin.debug:
    var: hashalgopt
    verbosity: 1
  when: hashalgopt is defined

- name: register fact change_hashalgopt (1)
  ansible.builtin.set_fact:
    change_hashalgopt: true
  with_items: "{{ hashalgopt.matches }}"
  when:
    - hashalgopt is defined
    - hashalgopt.matches is defined
    - hashalgopt_count.count > 0
    - ((item['hash-algorithm-option'] not in ipsecphasevar2[uniqid]['hash-algorithm-options'])
      or
      (ipsecphasevar2[uniqid]['hash-algorithm-options']|length) != (hashalgopt.matches|length))

- name: register fact change_hashalgopt (2)
  ansible.builtin.set_fact:
    change_hashalgopt: true
  when:
    - hashalgopt_count.count == 0
    - ipsecphasevar2[uniqid]['hash-algorithm-options'] | length > 0

- name: register fact change_hashalgopt (3)
  ansible.builtin.set_fact:
    change_hashalgopt: true
  when:
    - hashalgopt_count.count > 0
    - ipsecphasevar2[uniqid]['hash-algorithm-options'] | length == 0

- name: debug change_hashalgopt
  ansible.builtin.debug:
    var: change_hashalgopt
    verbosity: 1
  when: change_hashalgopt is defined

- name: "IPSec ike phase2 {{ uniqid }} reset hash-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']/hash-algorithm-option/{{ item['hash-algorithm-option'] }}"
    state: absent
    pretty_print: true
  with_items: "{{ hashalgopt.matches }}"
  when:
    - change_hashalgopt | default(false)
    - hashalgopt is defined
    - hashalgopt.matches is defined

- name: "IPSec ike phase2 {{ uniqid }} hash-algorithm-options for ikeid {{ ikeid }}"
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/ipsec/phase2[ikeid='{{ ikeid }}' and uniqid='{{ uniqid }}']"
    add_children:
      - hash-algorithm-option: "{{ item }}"
    pretty_print: true
  with_items:
    - "{{ ipsecphasevar2[uniqid]['hash-algorithm-options'] | default([]) }}"
  when: change_hashalgopt | default(False)

...
