---

# to add a new user , you must user something like:
# opn_user:
#   - name: ruth
#     uuid: ... (optional, but starting from version 25.x recommedet)
#     settings:
#       - key: uid
#         value: 1000
#       - key: password
#         value: "$...."
#       - key: authorizedkeys
#         b64_value: |
#           ssh-rsa ....
#       - key: groupname
#         value: admins
#       - key: shell
#         value: /usr/local/bin/bash
#
# opn_group is handeled in tasks/group.yml
# opn_group:
#   - name: admins
#     settings:
#       - key: member
#         value: 0  # root
#       - key: member
#         value: 1000  # ruth

- name: ensure required facts are available
  ansible.builtin.fail:
    msg: opnsense user handling requires role ansible-opnsense-facts
  when:
    - ansible_local.opnsense.core.product_version is not defined
    - opn_user is defined and opn_user

- name: check if we have configured users with uuid in saved xml
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: /opnsense/system/user[@uuid]/name
    count: true
  register: _configured_user_count
  when: ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')

- name: get uuid for users from saved cfg
  when:
    - ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - _configured_user_count.count | int > 0
  block:

    - name: read configured users from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: /opnsense/system/user[@uuid]/name
        content: text
      register: _configured_user

    - name: read uuid for configured users from saved cfg
      delegate_to: localhost
      community.general.xml:
        path: "{{ local_config_path }}"
        xpath: "/opnsense/system/user[name/text()='{{ item }}']"
        content: attribute
      register: _configured_user_uuid
      with_items: "{{ _configured_user.matches | map(attribute='name') }}"

    - name: construct map of configured user with uuid
      ansible.builtin.set_fact:
        _configured_user2uuid: "{{ (_configured_user2uuid | default({})) | combine({item['item']: item['matches'][0]['user']['uuid']}) }}"
      with_items: "{{ _configured_user_uuid.results }}"

- name: user name (by uuid)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/user[@uuid='{{ item.uuid | default(_configured_user2uuid[item.name]) | default(item.name | to_uuid) }}']/name"
    value: "{{ item.name }}"
    pretty_print: true
  with_items:
    - "{{ opn_user | default([]) }}"
  notify: local user sync
  when:
    - item.name is defined
    - ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')

- name: user settings (by uuid)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/user[@uuid='{{ item.0.uuid | default(_configured_user2uuid[item.0.name]) | default(item.0.name | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_user | default([]) }}"
    - settings
  notify: local user sync
  when:
    - ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - item.1.value is defined

- name: b64 user fields (by uuid)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/user[@uuid='{{ item.0.uuid | default(_configured_user2uuid[item.0.name]) | default(item.0.name | to_uuid) }}']/{{ item.1.key }}"
    value: "{{ item.1.b64_value | b64encode }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_user | default([]) }}"
    - settings
  notify: local user sync
  when:
    - ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - item.1.b64_value is defined

- name: user (legacy by name)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/user[name/text()='{{ item.0.name }}']/{{ item.1.key }}"
    value: "{{ item.1.value }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_user | default([]) }}"
    - settings
  notify: local user sync
  when:
    - not ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - item.1.value is defined

- name: b64 user fields (legacy by name)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/user[name/text()='{{ item.0.name }}']/{{ item.1.key }}"
    value: "{{ item.1.b64_value | b64encode }}"
    pretty_print: true
  with_subelements:
    - "{{ opn_user | default([]) }}"
    - settings
  notify: local user sync
  when:
    - not ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - item.1.b64_value is defined

- name: user - nextid is obsolet from 25.1 on
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/{{ item }}"
    state: absent
    pretty_print: true
  with_items: ['nextuid', 'nextgid']
  when:
    - ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')

- name: user - nextid (legacy pre 25.1)
  delegate_to: localhost
  community.general.xml:
    path: "{{ local_config_path }}"
    xpath: "/opnsense/system/{{ item.key }}"
    value: "{{ item.value }}"
    pretty_print: true
  with_dict: "{{ opn_nextid }}"
  when:
    - not ansible_local.opnsense.core.product_version is version_compare('25.1', '>=')
    - opn_nextid is defined
    - item.key in ['nextuid', 'nextgid']

...
